@import: code-printer

module CodeSyntax :sig

  val satysfi : CodePrinter.syntax
  val rust : CodePrinter.syntax
  val ocaml : CodePrinter.syntax
  val fsharp : CodePrinter.syntax
  val fortran : CodePrinter.syntax
  val haskell : CodePrinter.syntax
  val java : CodePrinter.syntax
  val javascript : CodePrinter.syntax
  val julia : CodePrinter.syntax
  val kotlin : CodePrinter.syntax

end = struct


  let satysfi = CodePrinter.make-syntax (|
    line-comment = CodePrinter.syntax-rule-block `%` `$`;
    block-comment = CodePrinter.syntax-rule-block `%` `$`;
    string = CodePrinter.syntax-rule-inline (`` `[^`]*` ``);
    keywords = [`if`; `then`; `else`; `@require`; `@import`; `@stage`; `let-rec`; `let-inline`; `let-block`; `let-math`; `let-mutable`; `let`; `in`; `=`; `end`; `struct`; `module`; `sig`; `type`; `val`; `direct`; `->`; `::`; `|>`; `match`; `with`; `when`; `for`; `while`; `of`; `as`; `do`; `fun`; `open`;];
    identifier = CodePrinter.syntax-rule-inline `\(\\\|\+\)?[a-zA-Z][a-zA-Z0-9-]*\|[0-9]+\|0x[0-9a-fA-F]+`;
    others = [];
  |)


  let rust = CodePrinter.make-syntax (|
    line-comment = CodePrinter.syntax-rule-block `//` `$`;
    block-comment = CodePrinter.syntax-rule-block `/\*` `\*/`;
    string = CodePrinter.syntax-rule-inline (` "[^"]*" `);
    keywords = [`as`; `break`; `const`; `continue`; `crate`; `else`; `enum`; `extern`; `false`; `fn`; `for`; `if`; `impl`; `in`; `let`; `loop`; `match`; `mod`; `move`; `mut`; `pub`; `ref`; `return`; `self`; `Self`; `static`; `struct`; `super`; `trait`; `true`; `type`; `unsafe`; `use`; `where`; `while`; `async`; `await`; `dyn`;];
    identifier = CodePrinter.syntax-rule-inline `[a-zA-Z][a-zA-Z0-9_]*!?`;
    others = [];
  |)

  let ocaml = CodePrinter.make-syntax (|
    line-comment = CodePrinter.syntax-rule-block `(\*` `\*)`;
    block-comment = CodePrinter.syntax-rule-block `(\*` `\*)`;
    string = CodePrinter.syntax-rule-inline (` "[^"]*" `);
    keywords = [`and`; `as`; `assert`; `asr`; `begin`; `class`; `closed`; `constraint`; `done`; `do`; `downto`; `else`; `end`; `exception`; `external`; `false`; `for`; `fun`; `function`; `functor`; `if`; `include`; `inherit`; `in`; `land`; `lazy`; `let`; `lor`; `lsl`; `lsr`; `lxor`; `match`; `method`; `mod`; `module`; `mutable`; `new`; `of`; `open`; `or`; `parser`; `private`; `rec`; `sig`; `struct`; `then`; `to`; `true`; `try`; `type`; `val`; `virtual`; `when`; `while`;];
    identifier = CodePrinter.syntax-rule-inline `[a-zA-Z][a-zA-Z0-9_]*\|[0-9]+`;
    others = [];
  |)


% ref: https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/keyword-reference
  let fsharp = CodePrinter.make-syntax (|
    line-comment = CodePrinter.syntax-rule-block `//` `$`;
    block-comment = CodePrinter.syntax-rule-block `(\*` `\*)`;
    string = CodePrinter.syntax-rule-inline (` "[^"]*" `);
    keywords = [`abstract`; `and`; `as`; `assert`; `base`; `begin`; `class`; `default`; `delegate`; `done`; `downcast`; `downto`; `do`; `elif`; `else`; `end`; `exception`; `extern`; `false`; `finally`; `fixed`; `for`; `fun`; `function`; `global`; `if`; `inherit`; `inline`; `interface`; `in`; `lazy`; `let!`; `let`; `match!`; `match`; `member`; `module`; `mutable`; `namespace`; `new`; `not`; `null`; `of`; `open`; `or`; `override`; `private`; `public`; `rec`; `return!`; `return`; `select`; `static`; `struct`; `then`; `to`; `true`; `try`; `type`; `upcast`; `use!`; `use`; `val`; `void`; `when`; `while`; `with`; `yield!`; `yield`; `const`; `asr`; `land`; `lor`; `lsl`; `lsr`; `lxor`; `mod`; `sig`];
    identifier = CodePrinter.syntax-rule-inline `[a-zA-Z][a-zA-Z0-9_]*\|[0-9]+`;
    others = [];
  |)



  % ref: http://fortranwiki.org/fortran/show/Keywords
  let fortran = CodePrinter.make-syntax (|
    line-comment = CodePrinter.syntax-rule-block `^!` `$`;
    block-comment = CodePrinter.syntax-rule-block `^!` `$`;
    string = CodePrinter.syntax-rule-inline (` "[^"]*"\|'[^']*' `);
    keywords = [`assign`; `backspace`; `block data`; `call`; `close`; `common`; `continue`; `data`; `dimension`; `do`; `else`; `else if`; `end`; `endfile`; `endif`; `entry`; `equivalence`; `external`; `format`; `function`; `goto`; `if`; `implicit`; `inquire`; `intrinsic`; `open`; `parameter`; `pause`; `print`; `program`; `read`; `return`; `rewind`; `rewrite`; `save`; `stop`; `subroutine`; `then`; `write`;
    `allocatable`; `allocate`; `case`; `contains`; `cycle`; `deallocate`; `elsewhere`; `exit?`; `include`; `interface`; `intent`; `module`; `namelist`; `nullify`; `only`; `operator`; `optional`; `pointer`; `private`; `procedure`; `public`; `recursive`; `result`; `select`; `sequence`; `target`; `use`; `while`; `where`;
    `elemental`; `forall`; `pure`;
    `abstract`; `associate`; `asynchronous`; `bind`; `class`; `deferred`; `enum`; `enumerator`; `extends`; `final`; `flush`; `generic`; `import`; `non_overridable`; `nopass`; `pass`; `protected`; `value`; `volatile`; `wait`;
    `block`; `codimension`; `do concurrent`; `contiguous`; `critical`; `error stop`; `submodule`; `sync all`; `sync images`; `sync memory`; `lock`; `unlock`;];
    identifier = CodePrinter.syntax-rule-inline `[a-zA-Z][a-zA-Z0-9]*\|[0-9]+`;
    others = [];
  |)


  % ref: https://wiki.haskell.org/Keywords
  let haskell = CodePrinter.make-syntax (|
    line-comment = CodePrinter.syntax-rule-block `--` `$`;
    block-comment = CodePrinter.syntax-rule-block `{-` `-}`;
    string = CodePrinter.syntax-rule-inline (` "[^"]*"\|'[^']*' `);
    keywords = [`as`; `case`; `of`; `class`; `data`; `family`; `instance`; `default`; `deriving`; `do`; `forall`; `foreign`; `hiding`; `if`; `then`; `else`; `import`; `infixl`; `infixr`; `infix`; `let`; `in`; `mdo`; `module`; `newtype`; `proc`; `qualified`; `rec`; `type`; `where`];
    identifier = CodePrinter.syntax-rule-inline `[a-zA-Z][a-zA-Z0-9_]*\|[0-9]+`;
    others = [];
  |)


  % ref: https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html
  let java = CodePrinter.make-syntax (|
    line-comment = CodePrinter.syntax-rule-block `//` `$`;
    block-comment = CodePrinter.syntax-rule-block `/\*` `\*/`;
    string = CodePrinter.syntax-rule-inline (` "[^"]*"\|'[^']*' `);
    keywords = [`abstract`; `continue`; `for`; `new`; `switch`; `assert`; `default`; `goto*`; `package`; `synchronized`; `boolean`; `do`; `if`; `private`; `this`; `break`; `double`; `implements`; `protected`; `throw`; `byte`; `else`; `import`; `public`; `throws`; `case`; `enum`; `instanceof`; `return`; `transient`; `catch`; `extends`; `int`; `short`; `try`; `char`; `final`; `interface`; `static`; `void`; `class`; `finally`; `long`; `strictfp`; `volatile`; `float`; `native`; `super`; `while`;];
    identifier = CodePrinter.syntax-rule-inline `[a-zA-Z][a-zA-Z0-9_]*\|[0-9]+`;
    others = [];
  |)

  % ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords
  let javascript = CodePrinter.make-syntax (|
    line-comment = CodePrinter.syntax-rule-block `//` `$`;
    block-comment = CodePrinter.syntax-rule-block `/\*` `\*/`;
    string = CodePrinter.syntax-rule-inline (` "[^"]*"\|'[^']*' `);
    keywords = [`break`; `case`; `catch`; `class`; `const`; `continue`; `debugger`; `default`; `delete`; `do`; `else`; `export`; `extends`; `finally`; `for`; `function`; `if`; `import`; `instanceof`; `in`; `new`; `return`; `super`; `switch`; `this`; `throw`; `try`; `typeof`; `var`; `let`; `const`; `void`; `while`; `with`; `yield`;];
    identifier = CodePrinter.syntax-rule-inline `[a-zA-Z][a-zA-Z0-9_]*\|[0-9]+`;
    others = [];
  |)


  % ref: https://docs.julialang.org/en/v1/base/base/
  let julia = CodePrinter.make-syntax (|
    line-comment = CodePrinter.syntax-rule-block `#` `$`;
    block-comment = CodePrinter.syntax-rule-block `#=` `=#`;
    string = CodePrinter.syntax-rule-inline (` "[^"]*" `);
    keywords = [`baremodule`; `begin`; `break`; `catch`; `const`; `continue`; `do`; `else`; `elseif`; `end`; `export`; `false`; `finally`; `for`; `function`; `global`; `if`; `import`; `let`; `local`; `macro`; `module`; `quote`; `return`; `struct`; `true`; `try`; `using`; `while`;];
    identifier = CodePrinter.syntax-rule-inline `[a-zA-Z][a-zA-Z0-9_]*\|[0-9]+`;
    others = [];
  |)


  % ref: https://kotlinlang.org/docs/keyword-reference.html
  let kotlin = CodePrinter.make-syntax (|
    line-comment = CodePrinter.syntax-rule-block `#` `$`;
    block-comment = CodePrinter.syntax-rule-block `#=` `=#`;
    string = CodePrinter.syntax-rule-inline (` "[^"]*" `);
    keywords = [`as?`; `as`; `break`; `class`; `continue`; `do`; `else`; `false`; `for`; `fun`; `if`; `init`; `inner`; `internal`; `in`; `!in`; `interface`; `is`; `!is`; `null`; `object`; `package`; `return`; `super`; `this`; `throw`; `true`; `try`; `typealias`; `typeof`; `value`; `val`; `var`; `when`; `while`; `by`; `catch`; `constructor`; `delegate`; `dynamic`; `field`; `file`; `finally`; `get`; `import`; `param`; `property`; `receiver`; `setparam`; `set`; `where`; `actual`; `abstract`; `annotation`; `companion`; `const`; `crossinline`; `data`; `enum`; `expect`; `external`; `final`; `lateinit`; `noinline`; `open`; `operator`; `out`; `override`; `private`; `protected`; `public`; `reified`; `sealed`; `suspend`; `tailrec`; `vararg`; `it`];
    identifier = CodePrinter.syntax-rule-inline `[a-zA-Z][a-zA-Z0-9_]*\|[0-9]+`;
    others = [];
  |)

end

