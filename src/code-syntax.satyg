@import: code-printer

module CodeSyntax :sig

  val satysfi : CodePrinter.syntax
  val rust : CodePrinter.syntax
  val ocaml : CodePrinter.syntax
  val fsharp : CodePrinter.syntax

end = struct


  let satysfi = CodePrinter.make-syntax (|
    line-comment = CodePrinter.syntax-rule-block `%` `$`;
    block-comment = CodePrinter.syntax-rule-block `%` `$`;
    string = CodePrinter.syntax-rule-inline (`` `[^`]*` ``);
    keywords = [`if`; `then`; `else`; `@require`; `@import`; `@stage`; `let-rec`; `let-inline`; `let-block`; `let-math`; `let-mutable`; `let`; `in`; `=`; `end`; `struct`; `module`; `sig`; `type`; `val`; `direct`; `->`; `::`; `|>`; `match`; `with`; `when`; `for`; `while`; `of`; `as`; `do`; `fun`; `open`;];
    identifier = CodePrinter.syntax-rule-inline `\(\\\|\+\)?[a-zA-Z][a-zA-Z0-9-]*\|[0-9]+\|0x[0-9a-fA-F]+`;
    others = [];
  |)


  let rust = CodePrinter.make-syntax (|
    line-comment = CodePrinter.syntax-rule-block `//` `$`;
    block-comment = CodePrinter.syntax-rule-block `/\*` `\*/`;
    string = CodePrinter.syntax-rule-inline (` "[^"]*" `);
    keywords = [`as`; `break`; `const`; `continue`; `crate`; `else`; `enum`; `extern`; `false`; `fn`; `for`; `if`; `impl`; `in`; `let`; `loop`; `match`; `mod`; `move`; `mut`; `pub`; `ref`; `return`; `self`; `Self`; `static`; `struct`; `super`; `trait`; `true`; `type`; `unsafe`; `use`; `where`; `while`; `async`; `await`; `dyn`;];
    identifier = CodePrinter.syntax-rule-inline `[a-zA-Z][a-zA-Z0-9_]*!?`;
    others = [];
  |)

  let ocaml = CodePrinter.make-syntax (|
    line-comment = CodePrinter.syntax-rule-block `(\*` `\*)`;
    block-comment = CodePrinter.syntax-rule-block `(\*` `\*)`;
    string = CodePrinter.syntax-rule-inline (` "[^"]*" `);
    keywords = [`and`; `as`; `assert`; `asr`; `begin`; `class`; `closed`; `constraint`; `done`; `do`; `downto`; `else`; `end`; `exception`; `external`; `false`; `for`; `fun`; `function`; `functor`; `if`; `include`; `inherit`; `in`; `land`; `lazy`; `let`; `lor`; `lsl`; `lsr`; `lxor`; `match`; `method`; `mod`; `module`; `mutable`; `new`; `of`; `open`; `or`; `parser`; `private`; `rec`; `sig`; `struct`; `then`; `to`; `true`; `try`; `type`; `val`; `virtual`; `when`; `while`;];
    identifier = CodePrinter.syntax-rule-inline `[a-zA-Z][a-zA-Z0-9_]*\|[0-9]+`;
    others = [];
  |)


% ref: https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/keyword-reference
  let fsharp = CodePrinter.make-syntax (|
    line-comment = CodePrinter.syntax-rule-block `//` `$`;
    block-comment = CodePrinter.syntax-rule-block `(\*` `\*)`;
    string = CodePrinter.syntax-rule-inline (` "[^"]*" `);
    keywords = [`abstract`; `and`; `as`; `assert`; `base`; `begin`; `class`; `default`; `delegate`; `done`; `downcast`; `downto`; `do`; `elif`; `else`; `end`; `exception`; `extern`; `false`; `finally`; `fixed`; `for`; `fun`; `function`; `global`; `if`; `inherit`; `inline`; `interface`; `in`; `lazy`; `let!`; `let`; `match!`; `match`; `member`; `module`; `mutable`; `namespace`; `new`; `not`; `null`; `of`; `open`; `or`; `override`; `private`; `public`; `rec`; `return!`; `return`; `select`; `static`; `struct`; `then`; `to`; `true`; `try`; `type`; `upcast`; `use!`; `use`; `val`; `void`; `when`; `while`; `with`; `yield!`; `yield`; `const`; `asr`; `land`; `lor`; `lsl`; `lsr`; `lxor`; `mod`; `sig`];
    identifier = CodePrinter.syntax-rule-inline `[a-zA-Z][a-zA-Z0-9_]*\|[0-9]+`;
    others = [];
  |)

end

